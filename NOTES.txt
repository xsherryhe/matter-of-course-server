MATTER OF COURSE
User (for logged in users)
//-devise
//-username
//-password
//-email
//-has one profile
//-has many hosted courses class name Course
//-has and belongs to many instructed courses class name Course
//-has many sent instruction invitations
//-has many received instruction invitations
//-has many enrollments, foreign key student_id
//-has many enrolled courses through enrollments source course
//-has many assignment submissions, foreign key student_id
//-has many sent messages
//-has many received messages

Profile
-avatar
//-first_name
//-middle_name
//-last_name
//-belongs to user

Course
-thumbnail
//-title
//-description
//-enum pending/open/closed
//-belongs to creator class name User
//-has and belongs to many instructors class name User (auto add creator as instructor)
//-has many instruction invitations
//-has many enrollments
//-has many students through enrollments class name User
//-has many lessons
//-has many posts as postable

//InstructionInvitation
//-enum pending accepted
//-belongs to course
//-belongs to sender, class name User
//-belongs to recipient, class name User
//-once accepted, recipient is instructor of course

Enrollment
//-belongs to course
//-belongs to student class name User

Lesson
//-title
//-order
//-belongs to course 
//-has many lesson_sections
//-has many assignments
//-has many posts as postable

LessonSection
//-title
//-body
//-order
//-belongs to lesson
-has many media (active storage/cloudinary)

Media
-belongs to lesson_section

Assignment
//-title
//-body/instructions
//-order
//-belongs to lesson
//-has many assignment submissions

AssignmentSubmission
//-enum incomplete complete
//-belongs to assignment
//-optional so that submissions still exist for the student even if the course/assignment is deleted
//-belongs to student, class name User
//-body
-has many files (active storage/cloudinary)
//-has many comments as commentable

Message
//-belongs to sender class name User
//-belongs to recipient class name User
//-belongs to parent, class name Message, optional true
//-has many replies, class name Message
//-enum read_status, unread read
//-subject
//-body
//-create a message when an instruction invitation is sent
-send email with message body as parameter through Action Mailer

Post
//-title
//-body
//-belongs to postable
//-belongs to creator class name User
//-has many comments as commentable
//-link from postables as a "View Discussion" link
//-have display of post creator indicate their role (host, instructor, or student)

Comment
//-belongs to commentable
//-belongs to creator class name User
//-body

// TO DO: Make discussion a tab on lessons. Individual posts still have their own page.
// TO DO: Tab the student course pages: Overview, Lessons, Assignments, and Discussion
  --differentiate from unenrolled page, which only has Overview
  --assignments are subtabbed as My Assignments is, specificially for the course
// TO DO: Delete assignments from Assignments tab on hostsed/instructed courses
// TO DO: Lesson tabs 
    - All (with edit and delete buttons), 
    - Assignments (with edit button with form as subsection of lesson form, and delete buttons next to each assignment)
    - Discussion
// TO DO: Page scrolling through all list pages (e.g. user courses and user assignments) and subsections (e.g. assignments section of courses)
// TO DO: Add "date completed" to completed assignment submissions
// TO DO: Redirect unauthorized/need to sign in pages back to home page (alter fetcher error)
// TO DO: Add "hooks" for non-logged in users to sign in or sign up (e.g. to enroll in a course)
// TO DO: Prev lesson / next lesson buttons on lesson pages
// TO DO: Error catching from fetcher
  --in asResource, if catchError is false, send both the status and the fetcher error message as error.data.error
  --when catching 401 unauthorized errors at the asResource level, 
    set a flash error message then use the handleDelete redirect or a default of home
  --in other places, use a redirectUnauthorized similar to in LessonForm
// TO DO: Set default_url_options in production
// TO DO: Other devise routes (e.g. edit account, forgot password)
  //user profile pages
  //for destroy user, make them change the host of the courses and show error if hosts are not changed (destroy returns false)
// TO DO: Delete unused devise views and routes
// TO DO: Password validation
// TO DO: Testing
// TO DO: Fade in animation of homepage
// TO DO: Make closed courses less restrictive but more specific: 
    --students can view course, lessons, assignments, and discussion; and edit assignments and discussion
    --but students cannot create new assignments or discussion posts
// TO DO: Subject/category tags for courses
// TO DO: Websocket notifications
